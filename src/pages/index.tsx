import axios, { AxiosError } from "axios";
import { GetStaticPropsContext } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";

import cities from "@/lib/cities";

export async function getStaticProps(context: GetStaticPropsContext) {
  // Fetch all cities from the API
  return {
    props: {
      cities,
    }, // will be passed to the page component as props
  };
}

interface Props {
  cities: string[];
}

export default function Home({ cities }: Props) {
  const [input, setInput] = useState<string>("");
  const [filteredCities, setFilteredCities] = useState<string[]>(cities);
  const [showAutoComplete, setShowAutoComplete] = useState<boolean>(false);
  const [error, setError] = useState<string | boolean>(false);
  const router = useRouter();

  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;

    setInput(value);
    const filtered = cities.filter((city) =>
      city.toLowerCase().startsWith(value.toLowerCase())
    );
    setFilteredCities(filtered);
    console.log(value);
  };

  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    console.log(e.target);
    console.log(e.currentTarget);
    console.log(e.relatedTarget);
    // console.log(e)
    console.log("Handleblur called");
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (input === "") return;
    else {
      try {
        await axios.get(`/api/cityToLatLng?city=${input}`);
        router.push(`/weather/${input}`);
      } catch (error) {
        if (error instanceof AxiosError) {
          setError(error.response?.data.error);
          setTimeout(() => setError(false), 3000);
        } else {
          setError("Something went wrong");
          console.error("Error in handleSubmit:", error);
        }
      }
    }
    console.log("Submitted");
  };

  const handleAutocomplete = (e: React.MouseEvent<HTMLAnchorElement>) => {
    const value = e.currentTarget.innerText;
    console.log(value);
    setInput(value);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className="
          flex h-screen w-screen flex-col
          items-center justify-center
          "
      >
        <div className="flex h-full w-full flex-col items-center justify-center bg-gradient-to-br from-blue-400 to-blue-800 p-8">
          <h1 className="mb-5 text-center text-2xl font-semibold text-white lg:text-5xl">
            Search for a city
          </h1>
          <div
            onFocus={() => setShowAutoComplete(true)}
            onBlur={handleBlur}
            className="w-full lg:w-1/2"
          >
            {error && (
              <h1 className="animate-pulse text-center text-2xl font-semibold text-red-500">
                {error}
              </h1>
            )}
            <form onSubmit={handleSubmit} className="flex">
              <input
                onChange={handleInput}
                className={`h-10 w-full px-2 
                ${
                  showAutoComplete
                    ? "rounded-tl-lg border-t-2 border-l-2"
                    : "rounded-l-lg border-y-2 border-l-2"
                }
                ${error ? "border-red-500" : ""}
                `}
                placeholder="City name"
                value={input}
              />
              <button
                className={`
                ${
                  showAutoComplete
                    ? "rounded-tr-lg border-t-2 border-r-2"
                    : "rounded-r-lg border-y-2 border-r-2"
                }
                ${error ? "border-red-500" : ""}
                  bg-white bg-opacity-50 px-4 font-semibold`}
              >
                search
              </button>
            </form>
            <div className="h-20">
              {showAutoComplete && (
                <div
                  className={`flex w-full min-w-full flex-wrap gap-5 overflow-auto rounded-b-lg border-x-2 border-b-2 bg-black bg-opacity-50 p-6 text-cyan-400 ${
                    error ? "border-red-500" : ""
                  }`}
                >
                  {filteredCities.length === 0 ? (
                    <p className="text-white">No results found..</p>
                  ) : (
                    filteredCities.slice(0, 4).map((city) => (
                      <a
                        key={city}
                        className="cursor-pointer underline"
                        onClick={handleAutocomplete}
                      >
                        {city}
                      </a>
                    ))
                  )}
                  {filteredCities.length > 4 && (
                    <p className="text-white">
                      {filteredCities.length - 4} more results...
                    </p>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
